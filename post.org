* Introduction

  FuzzChick is a new project which aims to improve QuickChick through
  the use of fuzzing techniques. Our primary objective for our CIS-700
  project was to utilize FuzzChick and examine its effectiveness.

* What is QuickChick?

  To begin with it's worth recalling what QuickChick is!

  QuickChick is a property based testing framework in Coq. The high
  level overview of how QuickChick works is that it generates values
  of certain data types randomly, and then feeds these values into a
  tester for a function. A simple example of this would be randomly
  generating a list of integers, feeding this list to a sort function,
  and then running the output of this sort function through a function
  that checks whether or not the list is sorted.

  #+CAPTION: QuickChick workflow
  #+NAME: fig:quickchick
  [[./img/quickchick.jpg]]

  This is a pretty simple idea, but it works incredibly well in
  practice. Furthermore, QuickChick has many nice features where it
  can automatically derive random generators for values of different
  types and, importantly, a feature where it can shrink test cases to
  smaller much more easily understood test cases.

* What Does FuzzChick Hope to do?

  QuickChick is already a very useful tool, but sometimes getting good
  generators can be hard. Often times the user has to carefully tweak
  the distribution that test cases are generated with in order to
  properly exercise their code and get good test coverage. This
  negates the advantages of being able to derive generators for
  different data types, and makes the barrier of entry much higher for
  sophisticated test cases.

** Fuzzing?

   This is where AFL comes in. AFL is a fuzzing tool that has some
   intelligence about how to generate inputs to a program in order to
   explore as many distinct paths through the program as possible. The
   idea for FuzzChick is to leverage the work which went into AFL and
   use it as a black box to improve test case generation --- i.e., in
   order to generate test cases which achieve better code coverage and
   are more likely to find bugs without manually tweaking a generator.

   To achieve this Dr. Lampropoulos modified QuickChick to use an
   input stream generated from AFL as the source of
   randomness. Instead of using a random number generator to directly
   pick which constructor to choose for a data type when generating it
   at each point, the "randomness" in QuickChick now comes from
   AFL. The hope of this is that AFL will be able to pick the "random
   stream" in order to construct values that explore new paths in the
   program.

   #+CAPTION: FuzzChick workflow
   #+NAME: fig:fuzzchick
   [[./img/fuzzchick.jpg]]

* Evaluating FuzzChick

** Coverage with bisect_ppx

   We wanted to know if FuzzChick actually generated better test
   cases. Since the goal is to increase test coverage, we thought it
   would be worthwhile to see how FuzzChick impacted coverage using
   bisect_ppx (Bisect).

   Bisect is a code coverage tool in ocaml that measures how often
   each expression within an ocaml program is evaluated. We modified
   QuickChick to output code instrumented with Bisect. This was a
   relatively straightforward process as QuickChick normally runs all
   of its tests in ocaml, however we encountered a couple of bugs in
   the Bisect tool which made this process take a little
   longer. Bisect would go into an infinite loop if you compile the
   program using absolute paths, which QuickChick did. Verifying that
   this was the case took a little bit of time as it was unclear
   whether or not the extracted Coq code from QuickChick would make
   use of features (fancy recursive types, Obj.magic, etc) which
   caused Bisect to choke, however after some testing on a simple
   hello world program and some "delta debugging" on the arguments to
   the ocaml compiler, we discovered the root cause of the issue, and
   reported the bug upstream where it has now been fixed.

   Some additional work should be done on getting code coverage with
   QuickChick, but this initial rough implementation was good enough
   for us to get the measurements we needed. But, for future reference
   here is a list of things we would like to improve in the future:

   - QuickChick extracts a lot of Coq code into one file to run tests.
     + This makes code coverage results less useful because you have a
       lot of extra code that you wouldn't run in your test cases. For
       instance, all of QuickChick gets stuffed into this file.
     + All of your Coq code is in one file, so it's hard to where
       things came from, and how much of each of your Coq modules is
       actually covered by tests.
   - Every single test in QuickChick runs in a separate ml file, all
     with the extra extracted code.
     + You don't get total coverage information, each file is specific
       to each test case.
     + Hard to tell which file corresponds to which test, we fed
       through the test case string and put it into the file name to
       make this easier, but it's still not ideal.

   But again, we got this to the state where it was useful for making
   measurements for comparing QuickChick and FuzzChick.

** QuickChick vs FuzzChick

   Unfortunately our measurements seem to suggest that QuickChick is
   actually getting better test coverage than FuzzChick is. There
   could be many reasons for this, maybe FuzzChick is just slower, AFL
   needs more time to warm up, or possibly a myriad of other
   reasons... The prevailing theory right now, however, is that the
   code extracted from Coq is not as suitable for fuzzing.

   For instance we tested this function:

   #+begin_src coq
     Extract Constant unlikely_branch =>
     " fun i ->
       if (0 < i)
       then if (i mod 100 == 0)
            then if (i mod 1000 == 0)
                 then if (i mod 10000 == 0)
                      then if (i mod 100000 == 0)
                           then if (i mod 1000000 == 0)
                                then if (i < 1000001)
                                     then 42
                                     else 0
                                else 0
                           else 0
                      else 0
                 else 0
            else 0
       else 0
     ".


     Definition always_zero := forAll (choose (0%Z, 9999999%Z)) (fun n => unlikely_branch n =? 0).
   #+end_src

   In both the C and ocaml equivalents of this AFL was able to find
   the bug almost instantly. FuzzChick, however, was not able to find
   the bug, even when left to run for a full hour.

   This suggests to us that for whatever reason AFL is not able to
   utilize the coverage information for these branches to generate
   better test cases. Perhaps the extra indirection that FuzzChick
   introduces as it takes AFL's input and converts it into
   constructors for inductive data types is too much for AFL to
   follow, or perhaps the test case just occurs too far into the
   execution of the program for AFL to discover it quickly.

* Fuzzing on Apache
  Although we have compared the performance of QuickChick and
  FuzzChick on the code snippets we mentioned above, we want to
  look into how does QuickChick and FuzzChick perform on the large
  real world project. We choose Apache server as our victim.

** Setup
  We want both QuickChick and FuzzChick working with the Apache
  server, so we patch the Apache server following the blog post:
  "Fuzzing Apache httpd server with American Fuzzy Lop + persistent mode"
  so that FuzzChick will be able to initiate AFL.
   
  https://sensepost.com/blog/2017/fuzzing-apache-httpd-server-with-american-fuzzy-lop-%2B-persistent-mode/
   
  There are many versioning issues that we have went through. To
  reproduce the fuzzing environment and results, you can follow the
  README in the ocaml-fuzz directory.
  
  https://github.com/Quick700/Quick700/tree/master/ocaml-fuzz
  
  
** Experiment setup
  Apache is written in C but we are trying to test the server in Coq.
  We decided to use Ocaml as an intermediate language so that Coq could
  extract the Ocaml function, and Ocaml can use Unix call to instantiate
  C functions. That is, the coq program will be compiled to a ocaml program
  along with the Extracted ocaml function, and in that ocaml program, the
  Unix call can interact with the C program.
  
  Some techical details: the OCaml string and the Coq
  string are not the same. The Coq string in OCaml is a list of Char, while
  the Ocaml string is not. You need to pay attention on the string type
  when you are working with Extraction in Coq.
  
** Primitive Experiment
*** Goal
  Because there is no clear documentation how to use the patched
  server, our primitive goal is to find out a string that make the
  server run successfully. Thus, we specified that if the exit code
  of the apache server is non-zero, then it is expected, otherwise,
  we want to capture the string which makes the server run successfully.
  If we have one successful case that the server exit with 0, we can look
  at the string and guess what kind of argument should we provide.
  
*** Result
  Both QuickChick and FuzzChick failed to find out such a string which
  could boot the server.
  
**** QuickChick
  It's pretty natural that the QuickChick failed to find the string, since
  QuickChick is treating the Apache server as a black box, and generating
  random string to pass into the server. Expecting QuickChick find out the
  correct string is similar to expecting a Monkey types out the complete work
  of Shakespear.
  
**** FuzzChick
  It also failed to figure out the string even we gave it more hint than we
  did in the QuickChick case. It also takes more time than we did in
  the QuickChick case to fuzz apache. For QuickChick, it take seconds to
  generate 10000 strings to pass into the apache server and get the feedback,
  but it took around 1.2 seconds to generate 1 case and pass it to Apache for
  the FuzzChick. Maybe FuzzChick is actually generating sensible case which
  passed the syntax checks and get deeper into the server.
  
  Some interesting fact is, the FuzzChick also didn't get furthur into the
  server other than the client side. The patched server is using pthread to
  invoke the deeper methods using the string we passed in. However, after the
  pthread is invoked, none of the AFL calls are furthur invoked. The advantage
  that AFL could figure out whether the program is in a new state is lost
  after the pthread method is invoked. The server behind the scene is still
  a blackbox to FuzzChick as well. To reproduce this result, use gdb to break
  at main method on the server/main.c in the apache directory.
  
** Furthur Experiment
  Using OCaml's unix call, we can do more things rather than just obtain
  the exit code of a program. We want to know more about the reason why
  did the program fail. Is it really the case that FuzzChick could go
  furthur inside the server than QuickChick does?
  
*** goal
  We want to pass the result of calling the server to QuickChick and
  FuzzChick, and the specification is expecting all of the error messages
  are the same.
  
*** Result
  We first tried to use unix call to redirect both stdout and stderr to a
  string and pass that string to Coq, but we found this is a non trivial
  task not to block the execution.
  
  https://stackoverflow.com/questions/47294583/how-to-capture-subprocess-output-on-both-stderr-and-stdout-in-ocaml?rq=1
  
  Thus, we try to redirect the stdout to the Coq instead. This function
  requires OCaml Stdio library. Although we can use Ocamlfind and OCamlbuild
  in the original function, we are not able to find out how to use
  Stdio library in Coq when we extract the function.
  
  This experiment is aborted due to the lack of support of OCaml in Coq.
  
* Other Stuff we Tried

** Fuzzing DeepWeb

   [[https://deepspec.org/entry/Project/DeepSpec+Web+Server][DeepWeb]] is aiming
   to build a web server verified end-to-end, "from Internet RFCs all the way to
   transistors". We have written a Coq specification for a subset of HTTP, and
   tested it against real-world web servers. By switching from QuickChick
   (driven by pseudo-random number generators) to FuzzChick (with randomness
   provided by AFL), the tester could still capture the bug we inserted to
   Apache (technically, dropping the last byte from PUT request).

   QuickChick could capture the bug in 8.0±1.1s with 95% confidence, whereas
   FuzzChick might take hours to produce a counterexample. Such inefficiency is
   within our expectation, since the tester is interacting with the server via
   network interface, which is opaque to AFL. Instead of searching for more
   execution paths in the server, AFL could only expand its coverage in the
   tester i.e. the test case generator and checker. However, covering more paths
   in the generator does not necessarily reveal bugs faster, because the
   generator was such carefully tuned that requests leading to errors more
   easily are generated more frequently. Such tuning only works when the seeds
   are uniformly distributed, which is not provided by dynamic symbolic
   execution.

   #+CAPTION: Fuzzing DeepWeb
   #+NAME: fig:fuzzweb
   [[./img/fuzzweb.jpg]]

** Honggfuzz

   Initially we spent a significant amount of time trying to get more
   traditional tools for testing web servers to work, in order to get
   a point of comparison.

   We spent lots of time getting Honggfuzz to run, and while we
   eventually succeeded we were unable to use it as much of a
   comparison. QuickChick is quite a different tool, as it searches
   for functional correctness bugs, and not just crashes, and
   additionally Honggfuzz needed to run for significant periods of
   time to find any issues.

   Despite this we have a good write-up of how to use Honggfuzz with
   Apache, and we have created some helpful scripts and Dockerfiles
   which will make it easier for other people to try this tool in the
   future:

   https://github.com/Quick700/Quick700/tree/master/honggfuzz

** AFL

   We also tried to use plain AFL with Apache, which had a similar
   story to Honggfuzz. Unfortunately running a fuzzer to find bugs
   just takes far too much time to reliably use to collect data for a
   project.
